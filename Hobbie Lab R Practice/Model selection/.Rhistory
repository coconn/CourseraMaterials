obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.prettysize <- sapply(obj.size, function(r) prettyNum(r, big.mark = ",") )
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size,obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
out <- out[c("Type", "PrettySize", "Rows", "Columns")]
names(out) <- c("Type", "Size", "Rows", "Columns")
if (head)
out <- head(out, n)
out
}
ls.objects()
obj.size <- napply(names, object.size)
install.packages("cwhmisc")
library(cwhmisc)
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.prettysize <- sapply(obj.size, function(r) prettyNum(r, big.mark = ",") )
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size,obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
out <- out[c("Type", "PrettySize", "Rows", "Columns")]
names(out) <- c("Type", "Size", "Rows", "Columns")
if (head)
out <- head(out, n)
out
}
ls.objects()
obj.size <- napply(names, object.size)
?napply
??napply
napply(l1,l2,FUN=union)
ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos
lsos()
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.prettysize <- sapply(obj.size, function(r) prettyNum(r, big.mark = ",") )
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size,obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
out <- out[c("Type", "PrettySize", "Rows", "Columns")]
names(out) <- c("Type", "Size", "Rows", "Columns")
if (head)
out <- head(out, n)
out
}
lsos()
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(format(utils::object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(print(object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
.env$ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(print(object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand improved list of objects
.env$lsos <- function(..., n=10) {
.env$ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
x<-5
tmp<-data.table(airquality)
lsos()
zen
zen()
c(lsf.str(envir=.env, all.names=TRUE))
(.packages())
(.packages())
c(lsf.str(envir=.env, all.names=TRUE))
zen
zen
zen()
?file.choose
#started code 10/16/14
####################################################
#DECOMP MODELS
#STEP 1: model evaluation
library(nortest)
library(bbmle)
library(ggplot2)
install.packages("nortest")
install.packages("bbmle")
library(nortest)
library(bbmle)
library(ggplot2)
#read in resp data
data<-read.csv(file.choose()) #Resp_alldates_101614.csv (in NutNet>SOM_Data>Respiration folder)
head(data)
tail(data)
str(data)
?str
View(data)
colnames(data) #note relevant columns are 16 (TotC.mgg), 82 (INCUB_DAYS), and 84 (RESP_C)
data[c(1:3),c(16,82,84)] #confirm you've got the right columns here
c(max(data$ID_indiv_reps)
,3)
single.k=array(0,dim=c(max(data$ID_indiv_reps),3)) #kf and cf
double.k=array(0,dim=c(max(data$ID_indiv_reps),4)) #kf, cf, ks
a.aicc=array(0,dim=c(max(data$ID_indiv_reps),4)) #2aicc; 2weights; single, double
max(data$ID_indiv_reps)
getwd()
setwd("/Users/oconn568/Documents/GITHUB/Coursera")
setwd("/Users/oconn568/Documents/GITHUB/CourseraMaterials/Hobbie Lab R Practice/Model selection")
#fit models in a loop:
for (i in 1:max(data$ID_indiv_reps)){
s1=subset(data,data$ID_indiv_reps==i)
x = s1[,c(16,82,84)]  #select the columns with relevant data (e.g. incub days, resp, and total C)
xNA <-na.exclude(x) #omit lines with missing data (NAs)
#Single pool
#  model dailyresp=kf*(Cf*exp(-kf*t))
mleSingle <- mle2(y~dnorm(mean=(kf*(Cf*exp(-kf*xNA$INCUB_DAYS))),sd=sqrt(((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))) - y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1)))
attr(mleSingle,"df") = attr(mleSingle ,"df")+1
summary(mleSingle)
#extract k value
single.k[i,1]<-coef(mleSingle)[1]
single.k[i,2]<-coef(mleSingle)[2]
single.k[i,3]<-mean(xNA$ID_indiv_reps)
#Daily resp 2pool constrained (Yuste et al. 2008);
#  params = kf, ks, Cf
mleDouble <- mle2(y~dnorm(mean=kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS)),
sd=sqrt((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS))-
y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1, ks=0.001),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0, ks=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1, ks=0.0001)))
attr(mleDouble ,"df") = attr(mleDouble ,"df")+1
summary(mleDouble )
#Extract K and C values
double.k[i,1]<-coef(mleDouble)[1] #kf
double.k[i,2]<-coef(mleDouble)[2] #Cf
double.k[i,3]<-coef(mleDouble)[3] #ks
double.k[i,4]<-mean(xNA$ID_indiv_reps)
xx<-AICctab(mleSingle,mleDouble, nobs=nrow(x), sort=FALSE, delta=TRUE, weights=TRUE)
xx
a.aicc[i,1]=xx$dAICc[1]
a.aicc[i,2]=xx$dAICc[2]
a.aicc[i,3]=xx$weight[1]
a.aicc[i,4]=xx$weight[2]
a.aicc[i,]
i
}
warnings()
write.csv(a.aicc, file = "aic_pergsoil.csv")
write.csv(single.k, file = "singlek_pergsoil.csv")
write.csv(double.k, file = "doublek_pergsoil.csv")
############
#STEP 2: get predicted values from the two-pool fit
double.k=array(0,dim=c(max(data$ID_indiv_reps),4)) #kf, cf, ks
for (i in 1:max(data$ID_indiv_reps)){
s1=subset(data,data$ID_indiv_reps==i)
x = s1[,c(16,82,84)]  #select the columns with relevant data (e.g. incub days, resp, and total C)
xNA <-na.exclude(x) #omit lines with missing data (NAs)
#Daily resp 2pool constrained (Yuste et al. 2008);
#  params = kf, ks, Cf
mleDouble <- mle2(y~dnorm(mean=kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS)),
sd=sqrt((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS))-
y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1, ks=0.001),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0, ks=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1, ks=0.0001)))
attr(mleDouble ,"df") = attr(mleDouble ,"df")+1
summary(mleDouble )
#Extract K and C values
double.k[i,1]<-coef(mleDouble)[1] #kf
double.k[i,2]<-coef(mleDouble)[2] #Cf
double.k[i,3]<-coef(mleDouble)[3] #ks
#preds
if(i==1){predmle2.a=double.k[i,1]*(double.k[i,2]*exp(-double.k[i,1]*xNA[,2])) +
double.k[i,3]*((xNA[,1]-double.k[i,2])*exp(-double.k[i,3]*xNA[,1]))}
if(i>1){
predmle2temp=double.k[i,1]*(double.k[i,2]*exp(-double.k[i,1]*xNA[,2])) +
double.k[i,3]*((xNA[,1]-double.k[i,2])*exp(-double.k[i,3]*xNA[,1]))
predmle2.a=append(predmle2.a,predmle2temp)
}
}
#get values all reps are run
write.csv(predmle2.a,"predmle2a.csv")
data<-subset(data, RESP_C!="NA")
tail(data)
ggplot(data, aes(x=RESP_C, y=RESP_C_PRED)) +
geom_point(size=3)
data<-read.csv(file.choose()) #Resp_alldates_101614.csv (in NutNet>SOM_Data>Respiration folder)
data<-read.csv("Resp_alldates_101614.csv")
data<-read.csv("Resp_all-dates_101614.csv")
rm(list=ls())
library(nortest)
library(bbmle)
print(i)
i<-5
print(i)
#started code 10/16/14
#### christine
setwd("/Users/oconn568/Documents/GITHUB/CourseraMaterials/Hobbie Lab R Practice/Model selection")
####################################################
#DECOMP MODELS
#STEP 1: model evaluation
#install.packages("nortest")
#install.packages("bbmle")
library(nortest)
library(bbmle)
library(ggplot2)
#read in resp data
#data<-read.csv(file.choose()) #Resp_alldates_101614.csv (in NutNet>SOM_Data>Respiration folder)
## christine
data<-read.csv("Resp_all-dates_101614.csv")
#look at row headings
head(data)
tail(data)
str(data)
#call column names
colnames(data) #note relevant columns are 16 (TotC.mgg), 82 (INCUB_DAYS), and 84 (RESP_C)
data[c(1:3),c(16,82,84)] #confirm you've got the right columns here
#create vectors for parameters
single.k=array(0,dim=c(max(data$ID_indiv_reps),3)) #kf and cf
double.k=array(0,dim=c(max(data$ID_indiv_reps),4)) #kf, cf, ks
#create arrays to store AICc values
a.aicc=array(0,dim=c(max(data$ID_indiv_reps),4)) #2aicc; 2weights; single, double
#fit models in a loop:
for (i in 1:max(data$ID_indiv_reps)){
s1=subset(data,data$ID_indiv_reps==i)
x = s1[,c(16,82,84)]  #select the columns with relevant data (e.g. incub days, resp, and total C)
xNA <-na.exclude(x) #omit lines with missing data (NAs)
#Single pool
#  model dailyresp=kf*(Cf*exp(-kf*t))
mleSingle <- mle2(y~dnorm(mean=(kf*(Cf*exp(-kf*xNA$INCUB_DAYS))),sd=sqrt(((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))) - y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1)))
attr(mleSingle,"df") = attr(mleSingle ,"df")+1
summary(mleSingle)
#extract k value
single.k[i,1]<-coef(mleSingle)[1]
single.k[i,2]<-coef(mleSingle)[2]
single.k[i,3]<-mean(xNA$ID_indiv_reps)
#Daily resp 2pool constrained (Yuste et al. 2008);
#  params = kf, ks, Cf
mleDouble <- mle2(y~dnorm(mean=kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS)),
sd=sqrt((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS))-
y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1, ks=0.001),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0, ks=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1, ks=0.0001)))
attr(mleDouble ,"df") = attr(mleDouble ,"df")+1
summary(mleDouble )
#Extract K and C values
double.k[i,1]<-coef(mleDouble)[1] #kf
double.k[i,2]<-coef(mleDouble)[2] #Cf
double.k[i,3]<-coef(mleDouble)[3] #ks
double.k[i,4]<-mean(xNA$ID_indiv_reps)
xx<-AICctab(mleSingle,mleDouble, nobs=nrow(x), sort=FALSE, delta=TRUE, weights=TRUE)
xx
a.aicc[i,1]=xx$dAICc[1]
a.aicc[i,2]=xx$dAICc[2]
a.aicc[i,3]=xx$weight[1]
a.aicc[i,4]=xx$weight[2]
a.aicc[i,]
print(i)
}
max(data$ID_indiv_reps)
i
#started code 10/16/14
#### christine
setwd("/Users/oconn568/Documents/GITHUB/CourseraMaterials/Hobbie Lab R Practice/Model selection")
####################################################
#DECOMP MODELS
#STEP 1: model evaluation
#install.packages("nortest")
#install.packages("bbmle")
library(nortest)
library(bbmle)
library(ggplot2)
#read in resp data
#data<-read.csv(file.choose()) #Resp_alldates_101614.csv (in NutNet>SOM_Data>Respiration folder)
## christine
data<-read.csv("Resp_all-dates_101614.csv")
#look at row headings
head(data)
tail(data)
str(data)
#call column names
colnames(data) #note relevant columns are 16 (TotC.mgg), 82 (INCUB_DAYS), and 84 (RESP_C)
data[c(1:3),c(16,82,84)] #confirm you've got the right columns here
#create vectors for parameters
single.k=array(0,dim=c(max(data$ID_indiv_reps),3)) #kf and cf
double.k=array(0,dim=c(max(data$ID_indiv_reps),4)) #kf, cf, ks
#create arrays to store AICc values
a.aicc=array(0,dim=c(max(data$ID_indiv_reps),4)) #2aicc; 2weights; single, double
#fit models in a loop:
for (i in 1:max(data$ID_indiv_reps)){
s1=subset(data,data$ID_indiv_reps==i)
x = s1[,c(16,82,84)]  #select the columns with relevant data (e.g. incub days, resp, and total C)
xNA <-na.exclude(x) #omit lines with missing data (NAs)
#Single pool
#  model dailyresp=kf*(Cf*exp(-kf*t))
mleSingle <- mle2(y~dnorm(mean=(kf*(Cf*exp(-kf*xNA$INCUB_DAYS))),sd=sqrt(((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))) - y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1)))
attr(mleSingle,"df") = attr(mleSingle ,"df")+1
summary(mleSingle)
#extract k value
single.k[i,1]<-coef(mleSingle)[1]
single.k[i,2]<-coef(mleSingle)[2]
single.k[i,3]<-mean(xNA$ID_indiv_reps)
#Daily resp 2pool constrained (Yuste et al. 2008);
#  params = kf, ks, Cf
mleDouble <- mle2(y~dnorm(mean=kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS)),
sd=sqrt((sum((kf*(Cf*exp(-kf*xNA$INCUB_DAYS))+
ks*((xNA$TotC.mgg-Cf)*exp(-ks*xNA$INCUB_DAYS))-
y)^2))/length(y))),
start=list(kf=0.1, Cf=0.1, ks=0.001),
data=list(y=xNA$RESP_C),method="L-BFGS-B",
lower=list(kf=0, Cf=0, ks=0),
control=list(maxit=10e6, parscale = c(kf = 0.01, Cf=0.1, ks=0.0001)))
attr(mleDouble ,"df") = attr(mleDouble ,"df")+1
summary(mleDouble )
#Extract K and C values
double.k[i,1]<-coef(mleDouble)[1] #kf
double.k[i,2]<-coef(mleDouble)[2] #Cf
double.k[i,3]<-coef(mleDouble)[3] #ks
double.k[i,4]<-mean(xNA$ID_indiv_reps)
xx<-AICctab(mleSingle,mleDouble, nobs=nrow(x), sort=FALSE, delta=TRUE, weights=TRUE)
xx
a.aicc[i,1]=xx$dAICc[1]
a.aicc[i,2]=xx$dAICc[2]
a.aicc[i,3]=xx$weight[1]
a.aicc[i,4]=xx$weight[2]
a.aicc[i,]
print(i) ## christine added this
i
}
clc()
?pred
clc()
zen()
zen()
zen
rm(list=ls())
x<-5
zen
zen()
zen
